# Keep only the major titles, and cast the rest to "other"
df.test <- df.test %>% mutate(Title.1 = ifelse(Title %in% c("Master.", "Miss.", "Mrs.", "Mr."), Title, "other")) %>%
mutate(Title.1 = ifelse(Title == "Ms.", "Miss.", Title.1)) # There is one woman with the title "Ms". I'll cast this to Miss.
predictions <- predict(model.2, newdata = df.test, type = "response")
predictions
predictions <- predict(model.2, newdata = df.test, type = "response")
head(predictions)
df.test %>%
mutate(Survived = predictions > .5)
df.test %>%
mutate(Survived = predictions > .5) %>%
select(PassengerId, Survived)
sudf.test %>%
mutate(Survived = as.integer(predictions > .5)) %>%
select(PassengerId, Survived)
df.test %>%
mutate(Survived = as.integer(predictions > .5)) %>%
select(PassengerId, Survived)
knitr::opts_chunk$set(echo = TRUE)
submission <- df.test %>%
mutate(Survived = as.integer(predictions > .5)) %>%
select(PassengerId, Survived)
knitr::opts_chunk$set(echo = TRUE)
df.train <- read.csv("data/train.csv")
df.test <- read.csv("data/test.csv")
suppressMessages(require(dplyr))
suppressMessages(require(printr))
suppressMessages(require(knitr))
suppressMessages(require(ggplot2))
suppressMessages(require(grid))
suppressMessages(require(gridExtra))
suppressMessages(require(reshape2))
suppressMessages(require(stringr))
# number of passangers in dataset
paste("Number of passengers: ", nrow(df.train))
# Proportion that survived
paste("Proportion that survived: ", mean(df.train$Survived))
kable(
df.train %>%
group_by(Pclass) %>%
summarize(
num.passangers = n(),
survival.rate = mean(Survived))
)
kable(
df.train %>%
group_by(Pclass, Sex) %>%
summarize(
num.passangers = n(),
survival.rate = mean(Survived))
)
age_group <- function(Age){
if(is.na(Age)){
return("No Age")
}
if(Age < 5) {
return("Young Child")
}
else if(Age < 14) {
return("Child")
}
else {
return("Adult")
}
}
kable(
df.train %>%
filter(!is.na(Age)) %>%
rowwise() %>%
mutate(age.group = age_group(Age)) %>%
group_by(Pclass, Sex, age.group) %>%
summarise(
num.passengers = n(),
survival.rate = mean(Survived)
) %>%
arrange(desc(survival.rate))
)
kable(
df.train %>%
group_by(Pclass) %>%
mutate(class.size = n()) %>%
filter(is.na(Age)) %>%
summarize(num.passengers = n(), class.size = first(class.size), survival.rate = mean(Survived)) %>%
mutate(percent.na = num.passengers/class.size)
)
survival.rate.by.fam.size <- df.train %>%
mutate(family.size = SibSp + Parch + 1) %>%
group_by(family.size) %>%
summarise(num.families = n(),  survival.rate = mean(Survived))
grid.arrange(
ggplot(data = survival.rate.by.fam.size, aes(x = family.size, y = survival.rate)) + geom_col(),
ggplot(data = survival.rate.by.fam.size, aes(x = family.size, y = num.families)) + geom_col() +
geom_text(aes(x = family.size, y = num.families, label = num.families, vjust = -1)),
ncol = 1)
survival.rate.by.famsize.class <-
df.train %>%
mutate(family.size = SibSp + Parch + 1) %>%
group_by(Pclass, family.size) %>%
summarize(num.families = n(), survival.rate = mean(Survived))
g1 = ggplot(data = survival.rate.by.famsize.class, aes(x = family.size, y = survival.rate)) + geom_col() + facet_wrap(~Pclass, ncol = 1) + ggtitle("Survival rate by family size & class") + scale_x_continuous(breaks = 1:11)
g2 = ggplot(data = survival.rate.by.famsize.class, aes(x = family.size, y = num.families)) + geom_col() + geom_text(aes(x = family.size, y = num.families, label = num.families, vjust = -.5)) + facet_wrap(~Pclass, ncol = 1) + ggtitle("Number of families by size & class") + scale_x_continuous(breaks = 1:11)
grid.arrange(g1, g2, ncol = 2)
child.survival.by.parents.siblings.class.age <-
df.train %>%
filter(Age < 21) %>%
group_by(Pclass, Parch, SibSp) %>%
summarise(num.passengers = n(), survival.rate = mean(Survived))
g1 <- child.survival.by.parents.siblings.class.age %>% ggplot(aes(x = SibSp, y = Parch, fill = survival.rate)) + geom_tile() +geom_text(aes(x = SibSp, y = Parch, label = round(survival.rate,2)), color = "white") + facet_wrap(~Pclass) + ggtitle("Child Survival Rate By Number Siblings/Parents, Split by Class")
g2 <- child.survival.by.parents.siblings.class.age %>% ggplot(aes (x = SibSp, y = Parch, fill = num.passengers)) + geom_tile() + geom_text(aes(x = SibSp, y = Parch, label = num.passengers), color = "white") + facet_wrap(~Pclass) + ggtitle("Sibling/Parent Frequency By Class")
grid.arrange(g1, g2, ncol = 1)
df.train %>%
filter(Age > 21) %>%
group_by(Parch) %>%
summarize(num.passengers = n(), survival.rate = mean(Survived))
adult.survival.by.children.class <-
df.train %>%
filter(Age > 21) %>%
group_by(Parch, Pclass) %>%
summarize(num.passengers = n(), survival.rate = mean(Survived))
g1 = ggplot(data = adult.survival.by.children.class, aes(x = Parch, y = survival.rate)) + geom_col() + facet_wrap(~Pclass, ncol = 1) + ggtitle("Adult Survival Rate by\nNumber Of Children and Class") + scale_x_continuous(breaks = 1:6)
g2 = ggplot(data = adult.survival.by.children.class, aes(x = Parch, y = num.passengers)) + geom_col() + geom_text(aes(x = Parch, y = num.passengers, label = num.passengers, vjust = -.5)) + facet_wrap(~Pclass, ncol = 1) + ggtitle("Number of Adults by\nNumber Of Children and Class") + scale_x_continuous(breaks = 1:6)
grid.arrange(g1, g2, ncol = 2)
adult.survival.by.children.class <-
df.train %>%
filter(Age > 21) %>%
group_by(Parch, Pclass, Sex) %>%
summarize(num.passengers = n(), survival.rate = mean(Survived))
g1 <- ggplot(data = adult.survival.by.children.class, aes(x = Parch, y = survival.rate)) +  geom_bar(aes(fill = Sex), position = "dodge", stat = "identity") + facet_wrap(~Pclass)
g2 <- ggplot(data = adult.survival.by.children.class, aes(x = Parch, y = num.passengers)) +  geom_bar(aes(fill = Sex), position = "dodge", stat = "identity") + facet_wrap(~Pclass)
grid.arrange(g1, g2, nrow = 2)
# Add column for title
df.train$Title <- as.character(lapply(str_split(lapply(str_split(df.train$Name, ","), "[[", 2), " "), "[[", 2))
head(df.train[,c("Name", "Title", "Age")])
title.frequency <- df.train %>%
group_by(Title) %>%
summarize(num.passengers = n())
g1 <- df.train %>% ggplot(aes(x = Title, y = Age)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 60, hjust = 1))
g2 <- title.frequency %>% ggplot(aes(x = Title, y = num.passengers)) + geom_col() + theme(axis.text.x = element_text(angle = 60, hjust = 1))
grid.arrange(g1, g2, ncol= 1)
# Store the titles that exist in the test set in a dataframe
test.titles <- as.data.frame( as.character(lapply(str_split(lapply(str_split(df.test$Name, ","), "[[", 2), " "), "[[", 2)))
colnames(test.titles) <- c("Title")
test.titles %>%
group_by(Title) %>%
summarize(count = n()) %>%
arrange(desc(count))
title.frequency <- df.train %>%
filter(Title %in% c("Mr.", "Miss.", "Mrs.", "Master.")) %>%
group_by(Title) %>%
summarize(num.passengers = n())
g_title_ages <- df.train %>% filter(Title %in% c("Mr.", "Miss.", "Mrs.", "Master.")) %>% ggplot(aes(x = Title, y = Age)) + geom_boxplot()
g_title_frequency <- title.frequency %>% filter(Title %in% c("Mr.", "Miss.", "Mrs.", "Master.")) %>%ggplot(aes(x = Title, y = num.passengers)) + geom_col()
grid.arrange(g_title_ages, g_title_frequency, ncol= 1)
# Average age for passengers with title "Master" in training set:
df.train %>% filter(Title == "Master.", !is.na(Age)) %>% select(Age) %>% summarize(avg.age = mean(Age))
# Fill missing values
df.train[is.na(df.train$Age) & df.train$Title == "Master.", "Age"] <- 5
df.train %>% ggplot(aes(x = Age, y = Survived)) + geom_point() + geom_smooth()
df.train %>% ggplot(aes(x = Age, y = Survived)) + geom_point() + geom_smooth() + facet_wrap(~Pclass, ncol = 2)
#split rows into train and cross validation set. (records not in 'train' are in cross validation set)
set.seed(1)
train <- sample(1:nrow(df.train), round(.8*nrow(df.train)), replace = FALSE)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Sex*Pclass +
Parch*Age
model.1 <- glm(formula = formula, data = df.train[train,], family = binomial)
summary(model.1)
cv.probs <- predict(model.1, newdata = df.train[-train, ], type = "response", na.action = "na.pass")
head(cv.probs)
# Convert logistic regression output to predictions
cv.predictions <- rep(0, length(cv.probs))
cv.predictions[cv.probs > .5] = 1
# extract true cross validated response
Y <- df.train[-train, "Survived"]
classification.error <- function(pred, Y){
return(mean(pred != Y))
}
precision <- function(pred, Y){
return( sum(pred == 1 & Y ==1) / sum(pred == 1))
}
recall <-  function(pred, Y){
return(sum(pred == 1 & Y == 1)/sum(Y == 1))
}
F1.score <- function(pred, Y){
prec <- precision(pred, Y)
rec <- recall(pred, Y)
return(2*(prec*rec)/(prec + rec))
}
table(cv.predictions, Y)
sprintf("Classification error: %f", classification.error(cv.predictions, Y))
sprintf("Classification accuracy: %f", mean(cv.predictions == Y))
sprintf("Precision: %f", precision(cv.predictions, Y))
sprintf("Recall: %f", recall(cv.predictions, Y))
sprintf("F1 Score: %f", F1.score(cv.predictions, Y))
df.train <- df.train %>%
mutate(Title.1 = ifelse(Title %in% c("Master.", "Miss.", "Mrs.", "Mr."), Title, "other")) %>%
mutate(Title.1 = ifelse(Title == "Ms.", "Miss.", Title.1)) # There is one woman with the title "Ms". I'll cast this to Miss.
df.train %>% ggplot(aes(x = Title.1, y = Age)) + geom_boxplot()
formula.2 <- Survived ~
Pclass +
Sex +
SibSp +
Title.1 +
Sex*Pclass +
Parch
model.2 <- glm(formula = formula.2, data = df.train[train,], family = binomial)
summary(model.2)
cv.probs.2 <- predict(model.2, newdata = df.train[-train, ], type = "response")
# Convert logistic regression output to predictions
cv.predictions.2 <- rep(0, length(cv.probs.2))
cv.predictions.2[cv.probs.2 > .5] = 1
table(cv.predictions.2, Y)
sprintf("Classification error: %f", classification.error(cv.predictions.2, Y))
sprintf("Classification accuracy: %f", mean(cv.predictions.2 == Y))
sprintf("Precision: %f", precision(cv.predictions.2, Y))
sprintf("Recall: %f", recall(cv.predictions.2, Y))
sprintf("F1 Score: %f", F1.score(cv.predictions.2, Y))
# Add column for title
df.test$Title <- as.character(lapply(str_split(lapply(str_split(df.test$Name, ","), "[[", 2), " "), "[[", 2))
# Keep only the major titles, and cast the rest to "other"
df.test <- df.test %>% mutate(Title.1 = ifelse(Title %in% c("Master.", "Miss.", "Mrs.", "Mr."), Title, "other")) %>%
mutate(Title.1 = ifelse(Title == "Ms.", "Miss.", Title.1)) # There is one woman with the title "Ms". I'll cast this to Miss.
predictions <- predict(model.2, newdata = df.test, type = "response")
head(predictions)
submission <- df.test %>%
mutate(Survived = as.integer(predictions > .5)) %>%
select(PassengerId, Survived)
head(submission, 10)
submission <- df.test %>%
mutate(Survived = as.integer(predictions > .5)) %>%
select(PassengerId, Survived)
head(submission, 10)
write.csv(submission, "sumbmission.csv")
df.test
submissin
submissin
submission
write.csv(submission, "sumbmission.csv", header = T)
write.csv(submission, "sumbmission.csv")
write.csv(submission, "sumbmission.csv", row.names = FALSE)
# number of passangers in dataset
nrow(df.train)
# Proportion of passangers that survived
mean(df.train$Survived)
# Average age for passengers with title "Master" in training set:
kable(df.train %>% filter(Title == "Master.", !is.na(Age)) %>% select(Age) %>% summarize(avg.age = mean(Age)))
knitr::opts_chunk$set(echo = TRUE)
df.train <- read.csv("data/train.csv")
df.test <- read.csv("data/test.csv")
suppressMessages(require(dplyr))
suppressMessages(require(knitr))
suppressMessages(require(ggplot2))
suppressMessages(require(grid))
suppressMessages(require(gridExtra))
suppressMessages(require(reshape2))
suppressMessages(require(stringr))
# number of passangers in dataset
nrow(df.train)
# Proportion of passangers that survived
mean(df.train$Survived)
kable(
df.train %>%
group_by(Pclass) %>%
summarize(
num.passangers = n(),
survival.rate = mean(Survived))
)
kable(
df.train %>%
group_by(Pclass, Sex) %>%
summarize(
num.passangers = n(),
survival.rate = mean(Survived))
)
age_group <- function(Age){
if(is.na(Age)){
return("No Age")
}
if(Age < 5) {
return("Young Child")
}
else if(Age < 14) {
return("Child")
}
else {
return("Adult")
}
}
kable(
df.train %>%
filter(!is.na(Age)) %>%
rowwise() %>%
mutate(age.group = age_group(Age)) %>%
group_by(Pclass, Sex, age.group) %>%
summarise(
num.passengers = n(),
survival.rate = mean(Survived)
) %>%
arrange(desc(survival.rate))
)
kable(
df.train %>%
group_by(Pclass) %>%
mutate(class.size = n()) %>%
filter(is.na(Age)) %>%
summarize(num.passengers = n(), class.size = first(class.size), survival.rate = mean(Survived)) %>%
mutate(percent.na = num.passengers/class.size)
)
survival.rate.by.fam.size <- df.train %>%
mutate(family.size = SibSp + Parch + 1) %>%
group_by(family.size) %>%
summarise(num.families = n(),  survival.rate = mean(Survived))
grid.arrange(
ggplot(data = survival.rate.by.fam.size, aes(x = family.size, y = survival.rate)) + geom_col(),
ggplot(data = survival.rate.by.fam.size, aes(x = family.size, y = num.families)) + geom_col() +
geom_text(aes(x = family.size, y = num.families, label = num.families, vjust = -1)),
ncol = 1)
survival.rate.by.famsize.class <-
df.train %>%
mutate(family.size = SibSp + Parch + 1) %>%
group_by(Pclass, family.size) %>%
summarize(num.families = n(), survival.rate = mean(Survived))
g1 = ggplot(data = survival.rate.by.famsize.class, aes(x = family.size, y = survival.rate)) + geom_col() + facet_wrap(~Pclass, ncol = 1) + ggtitle("Survival rate by family size & class") + scale_x_continuous(breaks = 1:11)
g2 = ggplot(data = survival.rate.by.famsize.class, aes(x = family.size, y = num.families)) + geom_col() + geom_text(aes(x = family.size, y = num.families, label = num.families, vjust = -.5)) + facet_wrap(~Pclass, ncol = 1) + ggtitle("Number of families by size & class") + scale_x_continuous(breaks = 1:11)
grid.arrange(g1, g2, ncol = 2)
child.survival.by.parents.siblings.class.age <-
df.train %>%
filter(Age < 21) %>%
group_by(Pclass, Parch, SibSp) %>%
summarise(num.passengers = n(), survival.rate = mean(Survived))
g1 <- child.survival.by.parents.siblings.class.age %>% ggplot(aes(x = SibSp, y = Parch, fill = survival.rate)) + geom_tile() +geom_text(aes(x = SibSp, y = Parch, label = round(survival.rate,2)), color = "white") + facet_wrap(~Pclass) + ggtitle("Child Survival Rate By Number Siblings/Parents, Split by Class")
g2 <- child.survival.by.parents.siblings.class.age %>% ggplot(aes (x = SibSp, y = Parch, fill = num.passengers)) + geom_tile() + geom_text(aes(x = SibSp, y = Parch, label = num.passengers), color = "white") + facet_wrap(~Pclass) + ggtitle("Sibling/Parent Frequency By Class")
grid.arrange(g1, g2, ncol = 1)
df.train %>%
filter(Age > 21) %>%
group_by(Parch) %>%
summarize(num.passengers = n(), survival.rate = mean(Survived))
adult.survival.by.children.class <-
df.train %>%
filter(Age > 21) %>%
group_by(Parch, Pclass) %>%
summarize(num.passengers = n(), survival.rate = mean(Survived))
g1 = ggplot(data = adult.survival.by.children.class, aes(x = Parch, y = survival.rate)) + geom_col() + facet_wrap(~Pclass, ncol = 1) + ggtitle("Adult Survival Rate by\nNumber Of Children and Class") + scale_x_continuous(breaks = 1:6)
g2 = ggplot(data = adult.survival.by.children.class, aes(x = Parch, y = num.passengers)) + geom_col() + geom_text(aes(x = Parch, y = num.passengers, label = num.passengers, vjust = -.5)) + facet_wrap(~Pclass, ncol = 1) + ggtitle("Number of Adults by\nNumber Of Children and Class") + scale_x_continuous(breaks = 1:6)
grid.arrange(g1, g2, ncol = 2)
adult.survival.by.children.class <-
df.train %>%
filter(Age > 21) %>%
group_by(Parch, Pclass, Sex) %>%
summarize(num.passengers = n(), survival.rate = mean(Survived))
g1 <- ggplot(data = adult.survival.by.children.class, aes(x = Parch, y = survival.rate)) +  geom_bar(aes(fill = Sex), position = "dodge", stat = "identity") + facet_wrap(~Pclass)
g2 <- ggplot(data = adult.survival.by.children.class, aes(x = Parch, y = num.passengers)) +  geom_bar(aes(fill = Sex), position = "dodge", stat = "identity") + facet_wrap(~Pclass)
grid.arrange(g1, g2, nrow = 2)
# Add column for title
df.train$Title <- as.character(lapply(str_split(lapply(str_split(df.train$Name, ","), "[[", 2), " "), "[[", 2))
head(df.train[,c("Name", "Title", "Age")])
title.frequency <- df.train %>%
group_by(Title) %>%
summarize(num.passengers = n())
g1 <- df.train %>% ggplot(aes(x = Title, y = Age)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 60, hjust = 1))
g2 <- title.frequency %>% ggplot(aes(x = Title, y = num.passengers)) + geom_col() + theme(axis.text.x = element_text(angle = 60, hjust = 1))
grid.arrange(g1, g2, ncol= 1)
# Store the titles that exist in the test set in a dataframe
test.titles <- as.data.frame( as.character(lapply(str_split(lapply(str_split(df.test$Name, ","), "[[", 2), " "), "[[", 2)))
colnames(test.titles) <- c("Title")
test.titles %>%
group_by(Title) %>%
summarize(count = n()) %>%
arrange(desc(count))
title.frequency <- df.train %>%
filter(Title %in% c("Mr.", "Miss.", "Mrs.", "Master.")) %>%
group_by(Title) %>%
summarize(num.passengers = n())
g_title_ages <- df.train %>% filter(Title %in% c("Mr.", "Miss.", "Mrs.", "Master.")) %>% ggplot(aes(x = Title, y = Age)) + geom_boxplot()
g_title_frequency <- title.frequency %>% filter(Title %in% c("Mr.", "Miss.", "Mrs.", "Master.")) %>%ggplot(aes(x = Title, y = num.passengers)) + geom_col()
grid.arrange(g_title_ages, g_title_frequency, ncol= 1)
# Average age for passengers with title "Master" in training set:
kable(df.train %>% filter(Title == "Master.", !is.na(Age)) %>% select(Age) %>% summarize(avg.age = mean(Age)))
# Fill missing values
df.train[is.na(df.train$Age) & df.train$Title == "Master.", "Age"] <- 5
df.train %>% ggplot(aes(x = Age, y = Survived)) + geom_point() + geom_smooth()
df.train %>% ggplot(aes(x = Age, y = Survived)) + geom_point() + geom_smooth() + facet_wrap(~Pclass, ncol = 2)
#split rows into train and cross validation set. (records not in 'train' are in cross validation set)
set.seed(1)
train <- sample(1:nrow(df.train), round(.8*nrow(df.train)), replace = FALSE)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Sex*Pclass +
Parch*Age
model.1 <- glm(formula = formula, data = df.train[train,], family = binomial)
summary(model.1)
cv.probs <- predict(model.1, newdata = df.train[-train, ], type = "response", na.action = "na.pass")
head(cv.probs)
# Convert logistic regression output to predictions
cv.predictions <- rep(0, length(cv.probs))
cv.predictions[cv.probs > .5] = 1
# extract true cross validated response
Y <- df.train[-train, "Survived"]
classification.error <- function(pred, Y){
return(mean(pred != Y))
}
precision <- function(pred, Y){
return( sum(pred == 1 & Y ==1) / sum(pred == 1))
}
recall <-  function(pred, Y){
return(sum(pred == 1 & Y == 1)/sum(Y == 1))
}
F1.score <- function(pred, Y){
prec <- precision(pred, Y)
rec <- recall(pred, Y)
return(2*(prec*rec)/(prec + rec))
}
table(cv.predictions, Y)
sprintf("Classification error: %f", classification.error(cv.predictions, Y))
sprintf("Classification accuracy: %f", mean(cv.predictions == Y))
sprintf("Precision: %f", precision(cv.predictions, Y))
sprintf("Recall: %f", recall(cv.predictions, Y))
sprintf("F1 Score: %f", F1.score(cv.predictions, Y))
df.train <- df.train %>%
mutate(Title.1 = ifelse(Title %in% c("Master.", "Miss.", "Mrs.", "Mr."), Title, "other")) %>%
mutate(Title.1 = ifelse(Title == "Ms.", "Miss.", Title.1)) # There is one woman with the title "Ms". I'll cast this to Miss.
df.train %>% ggplot(aes(x = Title.1, y = Age)) + geom_boxplot()
formula.2 <- Survived ~
Pclass +
Sex +
SibSp +
Title.1 +
Sex*Pclass +
Parch
model.2 <- glm(formula = formula.2, data = df.train[train,], family = binomial)
summary(model.2)
cv.probs.2 <- predict(model.2, newdata = df.train[-train, ], type = "response")
# Convert logistic regression output to predictions
cv.predictions.2 <- rep(0, length(cv.probs.2))
cv.predictions.2[cv.probs.2 > .5] = 1
table(cv.predictions.2, Y)
sprintf("Classification error: %f", classification.error(cv.predictions.2, Y))
sprintf("Classification accuracy: %f", mean(cv.predictions.2 == Y))
sprintf("Precision: %f", precision(cv.predictions.2, Y))
sprintf("Recall: %f", recall(cv.predictions.2, Y))
sprintf("F1 Score: %f", F1.score(cv.predictions.2, Y))
# Add column for title
df.test$Title <- as.character(lapply(str_split(lapply(str_split(df.test$Name, ","), "[[", 2), " "), "[[", 2))
# Keep only the major titles, and cast the rest to "other"
df.test <- df.test %>% mutate(Title.1 = ifelse(Title %in% c("Master.", "Miss.", "Mrs.", "Mr."), Title, "other")) %>%
mutate(Title.1 = ifelse(Title == "Ms.", "Miss.", Title.1)) # There is one woman with the title "Ms". I'll cast this to Miss.
predictions <- predict(model.2, newdata = df.test, type = "response")
head(predictions)
submission <- df.test %>%
mutate(Survived = as.integer(predictions > .5)) %>%
select(PassengerId, Survived)
head(submission, 10)
write.csv(submission, "sumbmission.csv", row.names = FALSE)
rnorm(n = 20)
x = data.frame(x = rnorm(n = 20))
df = data.frame(x = rnorm(n = 20), y = rnorm(n = 20))
df
ggplot(df, aes(x = x, y = y)) + geom_point()
library(ggplot2)
ggplot(df, aes(x = x, y = y)) + geom_point()
ggplot(df, aes(x = x, y = y)) + geom_point() + theme_few()
library(ggthemes)
install.packages('ggthemes')
library(ggthemes)
ggplot(df, aes(x = x, y = y)) + geom_point() + theme_few()
ggplot(df, aes(x = x, y = y)) + geom_point(color = y) + theme_few()
ggplot(df, aes(x = x, y = y, color = y)) + geom_point() + theme_few()
ggplot(df, aes(x = x, y = y, color = y)) + geom_point() + theme_economist()
ggplot(df, aes(x = x, y = y, color = y)) + geom_point() + theme_548()
ggplot(df, aes(x = x, y = y, color = y)) + geom_point() + theme_fivethirtyeight()
ggplot(df, aes(x = x, y = y)) + geom_point(color = y) + theme_few()
ggplot(df, aes(x = x, y = y, color = y)) + geom_point() + theme_few()
ggplot(df, aes(x = x, y = y, color = y)) + geom_point()
ggplot(df, aes(x = x, y = y, color = y)) + geom_point() + theme_few()
shiny::runApp('Desktop/taxis')
runApp('Desktop/taxis')
runApp('Desktop/taxis')
library(rCharts)
install.packages("rCharts")
setwd("Desktop/")
df.large <- read.csv("taxis/clean.csv")
library(dplyr
)
df.large[1:10, ]
df.small <- df.large[1:10, ]
df.samll$pickup_datetime > as.Date("2016-04-01")
df.small$pickup_datetime > as.Date("2016-04-01")
str(df.large)
as.POSIXct(df.small$pickup_datetime) > as.Date("2016-04-01")
as.POSIXct(df.small$pickup_datetime) >
"2016-04-01"
df.small
df.small %>% filter(as.POSIXct(pickup_datetime, format="%Y-%m-%d %H:%M:%S") >= "2016-04-01")
df.small <- df.large %>% filter(as.POSIXct(pickup_datetime, format="%Y-%m-%d %H:%M:%S") >= "2016-04-01")
head(df.small)
nrow(df.small)
nrow(df.large)
write.csv(df.small, "taxis/data/production.csv")
shiny::runApp('taxis')
runApp('taxis')
setwd("taxis/")
runApp()
runApp()
rm(df.large)
rm(df.small)
