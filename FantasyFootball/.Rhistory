adult.survival.by.children.class <-
df.train %>%
filter(Age > 21) %>%
group_by(Parch, Pclass, Sex) %>%
summarize(num.passengers = n(), survival.rate = mean(Survived))
g1 <- ggplot(data = adult.survival.by.children.class, aes(x = Parch, y = survival.rate)) +  geom_bar(aes(fill = Sex), position = "dodge", stat = "identity") + facet_wrap(~Pclass)
g2 <- ggplot(data = adult.survival.by.children.class, aes(x = Parch, y = num.passengers)) +  geom_bar(aes(fill = Sex), position = "dodge", stat = "identity") + facet_wrap(~Pclass)
grid.arrange(g1, g2, nrow = 2)
# Add column for title
df.train$Title <- as.character(lapply(str_split(lapply(str_split(df.train$Name, ","), "[[", 2), " "), "[[", 2))
head(df.train[,c("Name", "Title", "Age")])
title.frequency <- df.train %>%
group_by(Title) %>%
summarize(num.passengers = n())
g1 <- df.train %>% ggplot(aes(x = Title, y = Age)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 60, hjust = 1))
g2 <- title.frequency %>% ggplot(aes(x = Title, y = num.passengers)) + geom_col() + theme(axis.text.x = element_text(angle = 60, hjust = 1))
grid.arrange(g1, g2, ncol= 1)
# Store the titles that exist in the test set in a dataframe
test.titles <- as.data.frame( as.character(lapply(str_split(lapply(str_split(df.test$Name, ","), "[[", 2), " "), "[[", 2)))
colnames(test.titles) <- c("Title")
test.titles %>%
group_by(Title) %>%
summarize(count = n()) %>%
arrange(desc(count))
title.frequency <- df.train %>%
filter(Title %in% c("Mr.", "Miss.", "Mrs.", "Master.")) %>%
group_by(Title) %>%
summarize(num.passengers = n())
g1 <- df.train %>% filter(Title %in% c("Mr.", "Miss.", "Mrs.", "Master.")) %>% ggplot(aes(x = Title, y = Age)) + geom_boxplot()
g2 <- title.frequency %>% filter(Title %in% c("Mr.", "Miss.", "Mrs.", "Master.")) %>%ggplot(aes(x = Title, y = num.passengers)) + geom_col()
grid.arrange(g1, g2, ncol= 1)
# Average age for passengers with title "Master" in training set:
df.train %>% filter(Title == "Master.", !is.na(Age)) %>% select(Age) %>% summarize(avg.age = mean(Age))
# Fill missing values
df.train[is.na(df.train$Age) & df.train$Title == "Master.", "Age"] <- 5
#split rows into train and cross validation set. (records not in 'train' are in cross validation set)
set.seed(1)
train <- sample(1:nrow(df.train), round(.8*nrow(df.train)), replace = FALSE)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
cv.probs <- predict(model.log.regession, newdata = df.train[-train, ], type = "response")
head(cv.probs)
# Convert logistic regression output to predictions
cv.predictions <- rep(0, length(cv.probs))
cv.predictions[cv.probs > .5] = 1
# extract true cross validated response
Y <- df.train[-train, "Survived"]
classification.error <- function(pred, Y){
return(mean(pred != Y))
}
precision <- function(pred, Y){
return( sum(pred == 1 & Y ==1) / sum(pred == 1))
}
recall <-  function(pred, Y){
return(sum(pred == 1 & Y == 1)/sum(Y == 1))
}
F1.score <- function(pred, Y){
prec <- precision(pred, Y)
rec <- recall(pred, Y)
return(2*(prec*rec)/(prec + rec))
}
table(cv.predictions, Y)
sprintf("Classification error: %f", classification.error(cv.predictions, Y))
sprintf("Classification accuracy: %f", mean(cv.predictions == Y))
sprintf("Precision: %f", precision(cv.predictions, Y))
sprintf("Recall: %f", recall(cv.predictions, Y))
sprintf("F1 Score: %f", F1.score(cv.predictions, Y))
errors.type.2 = df.cv[cv.predictions == 0 & df.cv$Survived == 1, ]
View(errors.type.2)
df.cv <- df.train[-train,]
errors.type.2 = df.cv[cv.predictions == 0 & df.cv$Survived == 1, ]
View(errors.type.2)
df.cv <- df.train[-train,]
errors.type.2 = df.cv[cv.predictions == 0 & df.cv$Survived == 1, ]
head(errors.type.2)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch +
Sex*SibSp
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch +
Sex*SibSp
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch +
Sex*SibSp
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
df.cv <- df.train[-train,]
errors.type.2 = df.cv[cv.predictions == 0 & df.cv$Survived == 1, ]
View(errors.type.2)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch +
Parch^2
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch +
Parch^2
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch +
Parch**2
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch +
Parch*2
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch +
Parch^2
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch +
I(Parch^2)
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
summary(errors.type.2)
summary(errors.type.2 %>% select(Pclass, Sex, Age, Fare, Title)
summary(errors.type.2 %>% select(Pclass, Sex, Age, Fare, Title))
summary(errors.type.2 %>% select(Pclass, Sex, Age, Fare))
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch +
SibSp*Parch
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
is.na(df.train$Age)
mean(is.na(df.train$Age))
mean(is.na(errors.type.2$Age))
mean(is.na(df.train$Age))
mean(is.na(errors.type.2$Age))
title.frequency <- df.train %>%
filter(Title %in% c("Mr.", "Miss.", "Mrs.", "Master.")) %>%
group_by(Title) %>%
summarize(num.passengers = n())
g_title_ages <- df.train %>% filter(Title %in% c("Mr.", "Miss.", "Mrs.", "Master.")) %>% ggplot(aes(x = Title, y = Age)) + geom_boxplot()
g_title_frequencu <- title.frequency %>% filter(Title %in% c("Mr.", "Miss.", "Mrs.", "Master.")) %>%ggplot(aes(x = Title, y = num.passengers)) + geom_col()
grid.arrange(g_title_ages, g_title_frequencu, ncol= 1)
grid.arrange(g_title_ages, g_title_frequencu, ncol= 1)
title.frequency <- df.train %>%
filter(Title %in% c("Mr.", "Miss.", "Mrs.", "Master.")) %>%
group_by(Title) %>%
summarize(num.passengers = n())
g_title_ages <- df.train %>% filter(Title %in% c("Mr.", "Miss.", "Mrs.", "Master.")) %>% ggplot(aes(x = Title, y = Age)) + geom_boxplot()
g_title_frequency <- title.frequency %>% filter(Title %in% c("Mr.", "Miss.", "Mrs.", "Master.")) %>%ggplot(aes(x = Title, y = num.passengers)) + geom_col()
grid.arrange(g_title_ages, g_title_frequency, ncol= 1)
grid.arrange(g_title_ages, g_title_frequency, ncol= 1)
df.train %>% filter(SibSp == 0 & Parch == 0)
View(df.train %>% filter(SibSp == 0 & Parch == 0))
View(df.train %>% filter(Title == "Mrs."))
View(df.train %>% filter(Title == "Mrs." & Parch > 1))
df.train %>% filter(Title == "Mrs." & Parch > 1)
df.train %>% filter(Title == "Mrs." & Parch > 1) %>% ggplot(aes(x = Age)) + geom_histogram()
df.train %>% filter(Title == "Mrs." ) %>% ggplot(aes(x = Age)) + geom_histogram()
df.train %>% filter(Title == "Mrs." & Parch > 1) %>% ggplot(aes(x = Age)) + geom_histogram()
df.train %>% filter(Title == "Mrs." & Parch > 1) %>% ggplot(aes(x = Age)) + geom_histogram( bins = 10)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch +
Sibsp*Age
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch +
SibSp*Age
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
cv.probs <- predict(model.log.regession, newdata = df.train[-train, ], type = "response")
head(cv.probs)
# Convert logistic regression output to predictions
cv.predictions <- rep(0, length(cv.probs))
cv.predictions[cv.probs > .5] = 1
# extract true cross validated response
Y <- df.train[-train, "Survived"]
classification.error <- function(pred, Y){
return(mean(pred != Y))
}
precision <- function(pred, Y){
return( sum(pred == 1 & Y ==1) / sum(pred == 1))
}
recall <-  function(pred, Y){
return(sum(pred == 1 & Y == 1)/sum(Y == 1))
}
F1.score <- function(pred, Y){
prec <- precision(pred, Y)
rec <- recall(pred, Y)
return(2*(prec*rec)/(prec + rec))
}
table(cv.predictions, Y)
sprintf("Classification error: %f", classification.error(cv.predictions, Y))
sprintf("Classification accuracy: %f", mean(cv.predictions == Y))
sprintf("Precision: %f", precision(cv.predictions, Y))
sprintf("Recall: %f", recall(cv.predictions, Y))
sprintf("F1 Score: %f", F1.score(cv.predictions, Y))
df.cv <- df.train[-train,]
errors.type.2 = df.cv[cv.predictions == 0 & df.cv$Survived == 1, ]
View(errors.type.2)
# Percentage of rows with missing ages in training set
mean(is.na(df.train$Age))
# Percentage of rows with missing ages in rows in cross validation set where type 2 errors were made
mean(is.na(errors.type.2$Age))
grid.arrange(g_title_ages, g_title_frequency, ncol= 1)
View(df.train %>% filter(SibSp == 0 & Parch == 0))
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch +
SibSp*Sex
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
cv.probs <- predict(model.log.regession, newdata = df.train[-train, ], type = "response")
head(cv.probs)
# Convert logistic regression output to predictions
cv.predictions <- rep(0, length(cv.probs))
cv.predictions[cv.probs > .5] = 1
# extract true cross validated response
Y <- df.train[-train, "Survived"]
classification.error <- function(pred, Y){
return(mean(pred != Y))
}
precision <- function(pred, Y){
return( sum(pred == 1 & Y ==1) / sum(pred == 1))
}
recall <-  function(pred, Y){
return(sum(pred == 1 & Y == 1)/sum(Y == 1))
}
F1.score <- function(pred, Y){
prec <- precision(pred, Y)
rec <- recall(pred, Y)
return(2*(prec*rec)/(prec + rec))
}
table(cv.predictions, Y)
sprintf("Classification error: %f", classification.error(cv.predictions, Y))
sprintf("Classification accuracy: %f", mean(cv.predictions == Y))
sprintf("Precision: %f", precision(cv.predictions, Y))
sprintf("Recall: %f", recall(cv.predictions, Y))
sprintf("F1 Score: %f", F1.score(cv.predictions, Y))
df.cv <- df.train[-train,]
errors.type.2 = df.cv[cv.predictions == 0 & df.cv$Survived == 1, ]
View(errors.type.2)
# Percentage of rows with missing ages in training set
mean(is.na(df.train$Age))
# Percentage of rows with missing ages in rows in cross validation set where type 2 errors were made
mean(is.na(errors.type.2$Age))
grid.arrange(g_title_ages, g_title_frequency, ncol= 1)
View(df.train %>% filter(SibSp == 0 & Parch == 0))
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch
knitr::opts_chunk$set(echo = TRUE)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
cv.probs <- predict(model.log.regession, newdata = df.train[-train, ], type = "response")
head(cv.probs)
# Convert logistic regression output to predictions
cv.predictions <- rep(0, length(cv.probs))
cv.predictions[cv.probs > .5] = 1
# extract true cross validated response
Y <- df.train[-train, "Survived"]
classification.error <- function(pred, Y){
return(mean(pred != Y))
}
precision <- function(pred, Y){
return( sum(pred == 1 & Y ==1) / sum(pred == 1))
}
recall <-  function(pred, Y){
return(sum(pred == 1 & Y == 1)/sum(Y == 1))
}
F1.score <- function(pred, Y){
prec <- precision(pred, Y)
rec <- recall(pred, Y)
return(2*(prec*rec)/(prec + rec))
}
table(cv.predictions, Y)
sprintf("Classification error: %f", classification.error(cv.predictions, Y))
sprintf("Classification accuracy: %f", mean(cv.predictions == Y))
sprintf("Precision: %f", precision(cv.predictions, Y))
sprintf("Recall: %f", recall(cv.predictions, Y))
sprintf("F1 Score: %f", F1.score(cv.predictions, Y))
df.cv <- df.train[-train,]
errors.type.2 = df.cv[cv.predictions == 0 & df.cv$Survived == 1, ]
View(errors.type.2)
# Percentage of rows with missing ages in training set
mean(is.na(df.train$Age))
# Percentage of rows with missing ages in rows in cross validation set where type 2 errors were made
mean(is.na(errors.type.2$Age))
grid.arrange(g_title_ages, g_title_frequency, ncol= 1)
View(df.train %>% filter(SibSp == 0 & Parch == 0))
kable(
df.train %>%
group_by(Pclass) %>%
mutate(class.size = n()) %>%
filter(is.na(Age)) %>%
summarize(num.passengers = n(), class.size = first(class.size), survival.rate = mean(Survived)) %>%
mutate(percent.na = num.passengers/class.size)
)
nrow(df.train)
sum(is.na(df.train$Age))
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch +
Fare
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
formula <- Survived ~
Pclass +
Sex +
Age +
SibSp +
Age*Parch
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.exclude")
summary(model.log.regession)
# Add column for title
df.test$Title <- as.character(lapply(str_split(lapply(str_split(df.test$Name, ","), "[[", 2), " "), "[[", 2))
# Add column for title
df.test$Title <- as.character(lapply(str_split(lapply(str_split(df.test$Name, ","), "[[", 2), " "), "[[", 2))
# Fill in missing ages for people with title "Master."
df.test[is.na(df.test$Age) & df.test$Title == "Master.", "Age"]
# Add column for title
df.test$Title <- as.character(lapply(str_split(lapply(str_split(df.test$Name, ","), "[[", 2), " "), "[[", 2))
# Fill in missing ages for people with title "Master."
df.test[is.na(df.test$Age) & df.test$Title == "Master.", "Age"] <- 5
predictions <- predict(model.log.regession, newdata = df.test, type = "response")
predictions
predictions <- predict(model.log.regession, newdata = df.test, type = "response", na.action = "na.exclude")
predictions
cv.probs <- predict(model.log.regession, newdata = df.train[-train, ], type = "response", na.action = "na.exclude")
head(cv.probs)
# Convert logistic regression output to predictions
cv.predictions <- rep(0, length(cv.probs))
cv.predictions[cv.probs > .5] = 1
# extract true cross validated response
Y <- df.train[-train, "Survived"]
table(cv.predictions, Y)
table(cv.predictions, Y)
classification.error <- function(pred, Y){
return(mean(pred != Y))
}
precision <- function(pred, Y){
return( sum(pred == 1 & Y ==1) / sum(pred == 1))
}
recall <-  function(pred, Y){
return(sum(pred == 1 & Y == 1)/sum(Y == 1))
}
F1.score <- function(pred, Y){
prec <- precision(pred, Y)
rec <- recall(pred, Y)
return(2*(prec*rec)/(prec + rec))
}
table(cv.predictions, Y)
cv.probs <- predict(model.log.regession, newdata = df.train[-train, ], type = "response")
head(cv.probs)
cv.probs
length(cv.probs)
cv.probs <- predict(model.log.regession, newdata = df.train[-train, ], type = "response", na.action = "na.exclude")
head(cv.probs)
length(cv.probs)
cv.probs <- predict(model.log.regession, newdata = df.train[-train, ], type = "response", na.action = "na.omit")
head(cv.probs)
cv.probs <- predict(model.log.regession, newdata = df.train[-train, ], type = "response", na.action = "na.omit")
length(cv.probs)
cv.probs <- predict(model.log.regession, newdata = df.train[-train, ], type = "response", na.action = "na.pass")
head(cv.probs)
length(cv.probs)
cv.probs <- predict(model.log.regession, newdata = df.train[-train, ], type = "response", na.action = "na.pass")
head(cv.probs)
# Convert logistic regression output to predictions
cv.predictions <- rep(0, length(cv.probs))
cv.predictions[cv.probs > .5] = 1
# extract true cross validated response
Y <- df.train[-train, "Survived"]
table(cv.predictions, Y)
sprintf("Classification error: %f", classification.error(cv.predictions, Y))
sprintf("Classification accuracy: %f", mean(cv.predictions == Y))
sprintf("Precision: %f", precision(cv.predictions, Y))
sprintf("Recall: %f", recall(cv.predictions, Y))
sprintf("F1 Score: %f", F1.score(cv.predictions, Y))
predictions <- predict(model.log.regession, newdata = df.test, type = "response", na.action = "na.pass")
predictions
df.test[84,]
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial, na.action = "na.pass")
model.log.regession <- glm(formula = formula, data = df.train[train,], family = binomial)
summary(model.log.regession)
# Percentage of rows with missing ages in training set
mean(is.na(df.train$Age))
# Percentage of rows with missing ages in rows in cross validation set where type 2 errors were made
mean(is.na(errors.type.2$Age))
predictions <- predict(model.log.regession, newdata = df.test, type = "response", na.action = "na.pass")
predictions
predictions <- predict(model.log.regession, newdata = df.test)
predictions
predictions <- predict(model.log.regession, newdata = df.test, type = "response")
predictions
predictions <- predict(model.log.regession, newdata = df.test, type = "response", na.action = "na.exclude")
predictions
predictions <- predict(model.log.regession, newdata = df.test, type = "response", na.action = "na.pass")
predictions
