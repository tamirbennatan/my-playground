"PctBornSameState",
"PctSameHouse85",
"PctSameCity85",
"PctSameState85",
"LemasSwornFT",
"LemasSwFTPerPop",
"LemasSwFTFieldOps",
"LemasSwFTFieldPerPop",
"LemasTotalReq",
"LemasTotReqPerPop",
"PolicReqPerOffic",
"PolicPerPop",
"RacialMatchCommPol",
"PctPolicWhite",
"PctPolicBlack",
"PctPolicHisp",
"PctPolicAsian",
"PctPolicMinor",
"OfficAssgnDrugUnits",
"NumKindsDrugsSeiz",
"PolicAveOTWorked",
"LandArea",
"PopDens",
"PctUsePubTrans",
"PolicCars",
"PolicOperBudg",
"LemasPctPolicOnPatr",
"LemasGangUnitDeploy",
"LemasPctOfficDrugUn",
"PolicBudgPerPop",
"ViolentCrimesPerPop")
View(crimes_tmp)
write.csv(crimes, "imputed.csv")
View(imputate.models)
imputation.models = data_frame(incomplete.column = missing_columns) %>%
left_join(max_corr, by = c("incomplete.column" = "variable")) %>%
mutate(model = map2(.f = fit.impute, .x = incomplete.column, .y = crossvar)) %>%
mutate(glance = map(.x = model, .f = function(df) glance(df))) %>%
unnest(glance)
View(imputation.models)
library(dplyr)
library(ggplot2)
train <- read.csv("crossvalidation_splits/CandC-train3.csv")
valid <- read.csv("crossvalidation_splits/CandC-test3.csv
train <- read.csv("crossvalidation_splits/CandC-train3.csv")
valid <- read.csv("crossvalidation_splits/CandC-test3.csv")
head(train)
fit <- lm(data = train, ViolentCrimesPerPop ~ *)
fit <- lm(data = train, ViolentCrimesPerPop ~ .)
plot(fit)
plot(predit(fit, newdata = valid))
plot(predict(fit, newdata = valid))
data <- bind_rows(train,valid)
fit <- lm(data = data, ViolentCrimesPerPop ~ .)
plot(fit)
nrow(train)
nrow(valid)
nrow(valid) + nrow(train)
data[1905,]
fit.all <- lm(data = data, ViolentCrimesPerPop ~ .)
plot(fit.all)
# look at the mse of original model
fit.orig = lm(data = train, ViolentCrimesPerPop ~ .)
predictions <- residuals(newdata = valid, fit.orig)
res <- residuals(newdata = valid, fit.orig)
res
res^2
mean(res^2)
fit.all <- lm(data = data, ViolentCrimesPerPop ~ . - ViolentCrimesPerPop)
plot(fit.all)
fit.orig = lm(data = train, ViolentCrimesPerPop ~ . - ViolentCrimesPerPop)
res <- residuals(newdata = valid, fit.orig)
mean(res^2)
train <- read.csv("crossvalidation_splits/CandC-train1.csv")
valid <- read.csv("crossvalidation_splits/CandC-test1.csv")
data <- bind_rows(train,valid)
fit.all <- lm(data = data, ViolentCrimesPerPop ~ . - ViolentCrimesPerPop)
plot(fit.all)
# look at the mse of original model
fit.orig = lm(data = train, ViolentCrimesPerPop ~ . - ViolentCrimesPerPop)
res <- residuals(newdata = valid, fit.orig)
mean(res^2)
train <- read.csv("crossvalidation_splits/CandC-train2.csv")
valid <- read.csv("crossvalidation_splits/CandC-test2.csv")
data <- bind_rows(train,valid)
fit.all <- lm(data = data, ViolentCrimesPerPop ~ . - ViolentCrimesPerPop)
plot(fit.all)
# look at the mse of original model
fit.orig = lm(data = train, ViolentCrimesPerPop ~ . - ViolentCrimesPerPop)
res <- residuals(newdata = valid, fit.orig)
mean(res^2)
train <- read.csv("crossvalidation_splits/CandC-train1.csv")
valid <- read.csv("crossvalidation_splits/CandC-test1.csv")
data <- bind_rows(train,valid)
fit.all <- lm(data = data, ViolentCrimesPerPop ~ . - ViolentCrimesPerPop)
plot(fit.all)
# look at the mse of original model
fit.orig = lm(data = train, ViolentCrimesPerPop ~ . - ViolentCrimesPerPop)
res <- residuals(newdata = valid, fit.orig)
mean(res^2)
train <- read.csv("crossvalidation_splits/CandC-train0.csv")
valid <- read.csv("crossvalidation_splits/CandC-test0.csv")
data <- bind_rows(train,valid)
fit.all <- lm(data = data, ViolentCrimesPerPop ~ . - ViolentCrimesPerPop)
plot(fit.all)
# look at the mse of original model
fit.orig = lm(data = train, ViolentCrimesPerPop ~ . - ViolentCrimesPerPop)
res <- residuals(newdata = valid, fit.orig)
mean(res^2)
train <- read.csv("crossvalidation_splits/CandC-train3.csv")
valid <- read.csv("crossvalidation_splits/CandC-test3.csv")
data <- bind_rows(train,valid)
fit.all <- lm(data = data, ViolentCrimesPerPop ~ . - ViolentCrimesPerPop)
plot(fit.all)
# look at the mse of original model
fit.orig = lm(data = train, ViolentCrimesPerPop ~ . - ViolentCrimesPerPop)
res <- residuals(newdata = valid, fit.orig)
mean(res^2)
summary(fit.orig)
plot(residuals(newdata = valid, fit.orig))
library(dplyr)
library(ggplot2)
beetles <- read.table("data/Beetles2.dat", header = TRUE)
beetles %>% head()
beetles %>% head()
beetles <- beetles %>%
mutate(alive = n - dead)
?glm
fit <- glm(data = beetles, formula = (alive, dead) ~ logdose, family = binomial)
fit <- glm(data = beetles, formula = c(alive, dead) ~ logdose, family = binomial)
fit <- glm(data = beetles, formula = cbind(alive, dead) ~ logdose, family = binomial)
fit <- glm(data = beetles, formula = cbind(dead, alive) ~ logdose, family = binomial)
fit <- glm(data = beetles, formula = cbind(dead, alive) ~ logdose, family = binomial)
summary(fit)
plot(fit)
dim(beetles)
beetles <-  beetles %>%
mutate(dose = exp(logdose))
# fit a binomial GLM.
# by default, will use canonical (logit) link.
fit2 <- glm(data = beetles, formula = cbind(dead, alive) ~ dose, family = binomial)
summary(fit2)
?binomial
# fitting with a probit link
fit.probit = glm(data = beetles, cbind(dead, alive) ~ logdose, family = binomial(link = "probit"))
# fitting with a probit link
fit.probit = glm(data = beetles, cbind(dead, alive) ~ logdose, family = binomial(link = "probit"))
# fitting with complementary log-log link
fit.cloglog = glm(data = beetles, cbind(dead, alive) ~ logdose, family = binomial(link = "cloglog"))
summary(fit.cloglog)
summary(fit.cloglog)
summary(fit.probit)
summary(fit.cloglog)
seq(1,10,100)
?seq
# get the range of the continuous predictor variables
min_x = min(beetles$logdose)
max_x = max(beetles$logdose)
# Build a template upon which to plot
template <- data_frame(logdose = seq(from = min_x - .1, to = max_x + .1, by = (max_x - min_x) / 1000)
# get the range of the continuous predictor variables
min_x = min(beetles$logdose)
max_x = max(beetles$logdose)
# Build a template upon which to plot
template <- data_frame(logdose = seq(from = min_x - .1, to = max_x + .1, by = (max_x - min_x) / 1000))
View(template)
# get the range of the continuous predictor variables
min_x = min(beetles$logdose)
max_x = max(beetles$logdose)
# Build a template upon which to plot
template <- data_frame(logdose = seq(from = min_x - .1, to = max_x + .1, by = (max_x - min_x) / 1000))
# add the predictions to the template
template$logit.predictions = predict(fit, newdata = template)
template$probit.predictions = predict(fit.probit, newdata = template)
template$cloglog.predictions = predict(fit.cloglog, newdata = template)
library(reshape2)
template %>%
melt(id.vars = "logdose")
# get the range of the continuous predictor variables
min_x = min(beetles$logdose)
max_x = max(beetles$logdose)
# Build a template upon which to plot
template <- data_frame(logdose = seq(from = min_x , to = max_x , by = (max_x - min_x) / 1000))
# add the predictions to the template
template$logit.predictions = predict(fit, newdata = template)
template$probit.predictions = predict(fit.probit, newdata = template)
template$cloglog.predictions = predict(fit.cloglog, newdata = template)
template %>%
melt(id.vars = "logdose") %>%
rename(model = variable, probability = value)
template %>%
melt(id.vars = "logdose") %>%
rename(model = variable, log_odds = value)
template %>%
melt(id.vars = "logdose") %>%
rename(model = variable, log_odds = value) %>%
mutate(probability = ilogit(log_odds))
template %>%
melt(id.vars = "logdose") %>%
rename(model = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds))
install.packages("faraway")
# get the range of the continuous predictor variables
min_x = min(beetles$logdose)
max_x = max(beetles$logdose)
# Build a template upon which to plot
template <- data_frame(logdose = seq(from = min_x-.1 , to = max_x+.1 , by = (max_x+.1 - min_x-.1) / 1000))
# add the predictions to the template
template$logit.predictions = predict(fit, newdata = template)
template$probit.predictions = predict(fit.probit, newdata = template)
template$cloglog.predictions = predict(fit.cloglog, newdata = template)
template %>%
melt(id.vars = "logdose") %>%
rename(model = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds))
template %>%
melt(id.vars = "logdose") %>%
rename(model = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = model)) + geom_line()
# get the range of the continuous predictor variables
min_x = min(beetles$logdose)
max_x = max(beetles$logdose)
# Build a template upon which to plot
template <- data_frame(logdose = seq(from = min_x-.1 , to = max_x+.1 , by = (max_x+.1 - min_x-.1) / 1000))
# add the predictions to the template
template$logit = predict(fit, newdata = template)
template$probit = predict(fit.probit, newdata = template)
template$cloglog = predict(fit.cloglog, newdata = template)
template %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line()
# add a column for the number of living beetles.
# also add the proportions, for goo measure
beetles <- beetles %>%
mutate(alive = n - dead,
proportion = dead/n)
template %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion))
# get the range of the continuous predictor variables
min_x = min(beetles$logdose)
max_x = max(beetles$logdose)
# Build a template upon which to plot
template <- data_frame(logdose = seq(from = min_x-.1 , to = max_x+.1 , by = (max_x+.1 - min_x-.1) / 1000))
# add the predictions to the template
template$logit = predict(fit, newdata = template)
template$probit = predict(fit.probit, newdata = template)
template$cloglog = predict(fit.cloglog, newdata = template)
template %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion))
template %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line()
template %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color = "red"))
template %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color = ""))
template %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color =NULL))
template %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color =NULL), size = 4
)
template %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color =NULL), size = 3)
template %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color =NULL), size = 3) +
xlab("Carbon dioxide dosage (log scale)") +
ylab("Probability of beetle death")
template %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color =NULL), size = 3) +
xlab("Carbon dioxide dosage (log scale)") +
ylab("Probability of beetle death") +
ggthemes::theme_few()
template %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color =NULL), size = 3) +
xlab("Carbon dioxide dosage (log scale)") +
ylab("Probability of beetle death") +
ggthemes::theme_minimal()
template %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color =NULL), size = 3) +
xlab("Carbon dioxide dosage (log scale)") +
ylab("Probability of beetle death") +
ggthemes::theme_minimalist()
template %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color =NULL), size = 3) +
xlab("Carbon dioxide dosage (log scale)") +
ylab("Probability of beetle death") +
ggthemes::theme_minimalistic()
template %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color =NULL), size = 3) +
xlab("Carbon dioxide dosage (log scale)") +
ylab("Probability of beetle death") +
ggthemes::theme_few()
template %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = faraway::ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color =NULL), size = 3) +
xlab("Carbon dioxide dosage (log scale)") +
ylab("Probability of beetle death") +
ggthemes::theme_fivethirtyeight()
beetles
# logit predictions
beetles$logit.proportion = predict(fit)
# probit prediction
beetles$probit.proportion = predict(fit.probit)
# cloglog prediction
beetles$cloglog.proportion = predict(fit.cloglog)
beetles
beetles <-  beetles %>%
mutate(logit.prediction = logit.proportion * n,
probit.prediction = probit.proportion * n,
cloglog.prediction = cloglog.proportion * n)
beetles %>%
select(logdose, logit,prediction, probit.prediction, cloglog.prediction)
beetles %>%
select(logdose, logit.prediction, probit.prediction, cloglog.prediction)
library(faraway)
# logit predictions
beetles$logit.odds = predict(fit)
# probit prediction
beetles$porbit.odds = predict(fit.probit)
# cloglog prediction
beetles$clogog.odds = predict(fit.cloglog)
beetles <-  beetles %>%
mutate(logit.prediction = ilogit(logit.odds) * n,
probit.prediction = ilogit(probit.odds) * n,
cloglog.prediction = ilogit(cloglog.odds) * n)
# logit predictions
beetles$logit.odds = predict(fit)
# probit prediction
beetles$porbit.odds = predict(fit.probit)
# cloglog prediction
beetles$clogog.odds = predict(fit.cloglog)
beetles <-  beetles %>%
mutate(logit.prediction = ilogit(logit.odds) * n,
probit.prediction = ilogit(probit.odds) * n,
cloglog.prediction = ilogit(cloglog.odds) * n)
# logit predictions
beetles$logit.odds = predict(fit)
# probit prediction
beetles$probit.odds = predict(fit.probit)
# cloglog prediction
beetles$clogog.odds = predict(fit.cloglog)
beetles <-  beetles %>%
mutate(logit.prediction = ilogit(logit.odds) * n,
probit.prediction = ilogit(probit.odds) * n,
cloglog.prediction = ilogit(cloglog.odds) * n)
beetles <-  beetles %>%
mutate(logit.prediction = ilogit(logit.odds) * n,
probit.prediction = ilogit(probit.odds) * n,
cloglog.prediction = ilogit(cloglog.odds) * n)
# logit predictions
beetles$logit.odds = predict(fit)
# probit prediction
beetles$probit.odds = predict(fit.probit)
# cloglog prediction
beetles$cloglog.odds = predict(fit.cloglog)
beetles <-  beetles %>%
mutate(logit.prediction = ilogit(logit.odds) * n,
probit.prediction = ilogit(probit.odds) * n,
cloglog.prediction = ilogit(cloglog.odds) * n)
beetles %>%
select(logdose, logit.prediction, probit.prediction, cloglog.prediction)
beetles %>%
select(logdose, logit.prediction, probit.prediction, cloglog.prediction, dead)
# get the range of the continuous predictor variables
min_x = min(beetles$logdose)
max_x = max(beetles$logdose)
# Build a template upon which to plot
template <- data_frame(logdose = seq(from = min_x-.1 , to = max_x+.1 , by = (max_x+.1 - min_x-.1) / 1000))
# add the predictions to the template
template$logit = predict(fit, newdata = template)
template$probit = predict(fit.probit, newdata = template)
template$cloglog = predict(fit.cloglog, newdata = template)
# create a function for the inverse function of the complementary log-log link
cloglog.inv <- function(d){
return(1 - exp(-1*exp(d)))
}
# now, add the predictions in terms of the probabiliies
template <- template %>%
mutate(logit.predictions = ilogit(logit),
probit.predictions = pnorm(probit),
cloglog.predictions = cloglog.inv(cloglog))
template %>%
select(cloglog, logit.predictions, probit.predictions, cloglog.predictions) %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color =NULL), size = 3) +
xlab("Carbon dioxide dosage (log scale)") +
ylab("Probability of beetle death") +
ggthemes::theme_fivethirtyeight()
template %>%
select(logdose, logit.predictions, probit.predictions, cloglog.predictions) %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color =NULL), size = 3) +
xlab("Carbon dioxide dosage (log scale)") +
ylab("Probability of beetle death") +
ggthemes::theme_fivethirtyeight()
template %>%
select(logdose, logit.predictions, probit.predictions, cloglog.predictions) %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
xlab("Carbon dioxide dosage (log scale)") +
ylab("Probability of beetle death") +
ggthemes::theme_fivethirtyeight()
template %>%
select(logdose, logit.predictions, probit.predictions, cloglog.predictions) %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color =NULL), size = 3) +
xlab("Carbon dioxide dosage (log scale)") +
ylab("Probability of beetle death") +
ggthemes::theme_fivethirtyeight()
template %>%
select(cloglog, logit.predictions, probit.predictions, cloglog.predictions) %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
mutate(probability = ilogit(log_odds)) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color =NULL), size = 3) +
xlab("Carbon dioxide dosage (log scale)") +
ylab("Probability of beetle death") +
ggthemes::theme_fivethirtyeight()
template %>%
select(logdose, logit.predictions, probit.predictions, cloglog.predictions)
template %>%
select(logdose, logit.predictions, probit.predictions, cloglog.predictions) %>%
melt(id.vars = "logdose") %>%
rename(link = variable, log_odds = value) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color =NULL), size = 3) +
xlab("Carbon dioxide dosage (log scale)") +
ylab("Probability of beetle death") +
ggthemes::theme_fivethirtyeight()
template %>%
select(logdose, logit.predictions, probit.predictions, cloglog.predictions) %>%
melt(id.vars = "logdose") %>%
rename(link = variable, probability = value) %>%
ggplot(aes(x = logdose, y = probability, color = link)) + geom_line() +
geom_point(data = beetles, aes(x = logdose, y = proportion, color =NULL), size = 3) +
xlab("Carbon dioxide dosage (log scale)") +
ylab("Probability of beetle death") +
ggthemes::theme_fivethirtyeight()
source('~/.active-rstudio-document', echo=TRUE)
getwd()
setwd("./Desktop/my-playground/wikipedia-forecasting/")
